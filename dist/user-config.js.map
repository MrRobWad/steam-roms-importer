{"version":3,"sources":["../src/user-config.js"],"names":["getUserConfigDirectory","loadConfigObject","Promise","resolve","reject","regKey","hive","HKCU","key","myDocFolder","values","err","items","i","name","dir","join","value","existsSync","mkdirSync","subFolders","subFolder","subFolderPath","listFiles","p","exts","readdir","entries","filteredFiles","filter","entry","indexOf","extname","replace","objClass","result","configPath","__dirname","userConfigPath","jsonFiles","file","basename","toLowerCase","userConfigDir","generateUserJsonFile","userJsonFiles","updateFromUserJsonFile"],"mappings":"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","file":"user-config.js","sourcesContent":["import Winreg from 'winreg';\r\nimport path from 'path';\r\nimport fs from 'fs';\r\nimport each from 'lodash/each';\r\nimport { resolveEnvPath } from './util';\r\n\r\nexport function getUserConfigDirectory()\r\n{\r\n  return new Promise((resolve, reject) =>\r\n  {\r\n    var regKey = new Winreg(\r\n    {\r\n      hive: Winreg.HKCU,\r\n      key: '\\\\Software\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Explorer\\\\User Shell Folders'\r\n    });\r\n\r\n    var myDocFolder = regKey.values((err, items) =>\r\n    {\r\n      for (var i in items)\r\n      {\r\n        if (items[i].name === 'Personal')\r\n        {\r\n          let dir = resolveEnvPath(path.join(items[i].value, 'steam-roms'));\r\n\r\n          if (!fs.existsSync(dir))\r\n            fs.mkdirSync(dir);\r\n\r\n          let subFolders = ['consoles', 'emulators', 'icons'];\r\n\r\n          each(subFolders, (subFolder) =>\r\n          {\r\n            let subFolderPath = path.join(dir, subFolder);\r\n\r\n            if (!fs.existsSync(subFolderPath))\r\n              fs.mkdirSync(subFolderPath);\r\n          });\r\n\r\n          resolve(dir);\r\n        }\r\n      }\r\n    });\r\n  });\r\n}\r\n\r\nlet listFiles = (p, exts) =>\r\n{\r\n  return new Promise((resolve, reject) =>\r\n  {\r\n    fs.readdir(p, (err, entries) =>\r\n    {\r\n      let filteredFiles = entries.filter((entry) =>\r\n      {\r\n        return exts.indexOf(path.extname(entry).replace(/^\\./, '')) != -1;\r\n      });\r\n\r\n      resolve(filteredFiles);\r\n    });\r\n  });\r\n}\r\n\r\nexport async function loadConfigObject(name, objClass)\r\n{\r\n  let result = {};\r\n  let configPath = path.join(__dirname, 'config', name);\r\n  let userConfigPath = ''\r\n\r\n  const jsonFiles = await listFiles(configPath, ['json']);\r\n\r\n  each(jsonFiles, (file) =>\r\n  {\r\n    let name = path.basename(file, '.json').toLowerCase();\r\n    file = path.join(configPath, file);\r\n\r\n    result[name] = new objClass(file);\r\n  });\r\n\r\n  const userConfigDir = await getUserConfigDirectory()\r\n  userConfigPath = path.join(userConfigDir, name);\r\n\r\n  if (!fs.existsSync(userConfigPath))\r\n    fs.mkdirSync(userConfigPath);\r\n\r\n  for (const name in result)\r\n  {\r\n    let p = path.join(userConfigPath, `${name}.json`);\r\n\r\n    if (!fs.existsSync(p))\r\n      result[name].generateUserJsonFile(p);\r\n  }\r\n\r\n  const userJsonFiles = await listFiles(userConfigPath, ['json'])\r\n  for (let file of userJsonFiles)\r\n  {\r\n    let name = path.basename(file, '.json').toLowerCase();\r\n    file = path.join(userConfigPath, file);\r\n\r\n    if (result[name])\r\n      result[name].updateFromUserJsonFile(file);\r\n    else\r\n      result[name] = new objClass(file);\r\n  }\r\n\r\n  return result;\r\n};\r\n"]}