{"version":3,"sources":["../src/user-config.js"],"names":["getUserConfigDirectory","loadConfigObject","Promise","resolve","reject","regKey","hive","HKCU","key","myDocFolder","values","err","items","i","name","dir","join","value","existsSync","mkdirSync","subFolders","each","subFolder","subFolderPath","listFiles","p","exts","readdir","entries","filteredFiles","filter","entry","indexOf","extname","replace","objClass","result","configPath","__dirname","userConfigPath","waterfall","callback","then","jsonFiles","file","basename","toLowerCase","userConfigDir","updateFromJsonFile"],"mappings":"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","file":"user-config.js","sourcesContent":["import Winreg from 'winreg';\r\nimport path from 'path';\r\nimport fs from 'fs';\r\nimport async from 'async';\r\nimport _ from 'lodash';\r\n\r\nexport function getUserConfigDirectory()\r\n{\r\n    return new Promise((resolve, reject) =>\r\n    {\r\n        var regKey = new Winreg(\r\n        {\r\n            hive: Winreg.HKCU,\r\n            key: '\\\\Software\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Explorer\\\\User Shell Folders' \r\n        });\r\n\r\n        var myDocFolder = regKey.values((err, items) =>\r\n        {\r\n            for (var i in items)\r\n            {\r\n                if (items[i].name === 'Personal')\r\n                {\r\n                    let dir = path.join(items[i].value, 'steam-roms');\r\n\r\n                    if (!fs.existsSync(dir))\r\n                        fs.mkdirSync(dir);\r\n\r\n                    let subFolders = ['consoles', 'emulators', 'icons'];\r\n\r\n                    _.each(subFolders, (subFolder) =>\r\n                    {\r\n                        let subFolderPath = path.join(dir, subFolder);\r\n\r\n                        if (!fs.existsSync(subFolderPath))\r\n                            fs.mkdirSync(subFolderPath);\r\n                    });\r\n\r\n                    resolve(dir);\r\n                }\r\n            }\r\n        });\r\n    });\r\n}\r\n\r\nlet listFiles = (p, exts) =>\r\n{\r\n    return new Promise((resolve, reject) =>\r\n    {\r\n        fs.readdir(p, (err, entries) =>\r\n        {\r\n            let filteredFiles = entries.filter((entry) => \r\n            {\r\n                return exts.indexOf(path.extname(entry).replace(/^\\./, '') != -1);\r\n            });\r\n\r\n            resolve(filteredFiles);\r\n        });\r\n    });\r\n}\r\n\r\nexport function loadConfigObject(name, objClass)\r\n{\r\n    return new Promise((resolve, reject) =>\r\n    {\r\n        let result = {};\r\n        let configPath = path.join(__dirname, \"config\", name);\r\n        let userConfigPath = ''\r\n\r\n        async.waterfall(\r\n        [\r\n            (callback) => listFiles(configPath, ['json']).then((jsonFiles) => callback(null, jsonFiles)),\r\n            (jsonFiles, callback) =>\r\n            {\r\n                _.each(jsonFiles, (file) =>\r\n                {\r\n                    let name = path.basename(file, '.json').toLowerCase();\r\n                    file = path.join(configPath, file);\r\n\r\n                    result[name] = new objClass(file);\r\n                });\r\n\r\n                return callback(null);\r\n            },\r\n            (callback) => getUserConfigDirectory().then((userConfigDir) => callback(null, userConfigDir)),\r\n            (userConfigDir, callback) => \r\n            {\r\n                userConfigPath = path.join(userConfigDir, name);\r\n\r\n                if (!fs.existsSync(userConfigPath))\r\n                    fs.mkdirSync(userConfigPath);\r\n\r\n                listFiles(userConfigPath, ['json']).then((jsonFiles) => callback(null, jsonFiles));\r\n            },\r\n            (jsonFiles, callback) =>\r\n            {\r\n                _.each(jsonFiles, (file) =>\r\n                {\r\n                    let name = path.basename(file, '.json').toLowerCase();\r\n                    file = path.join(userConfigPath, file);\r\n\r\n                    if (result[name])\r\n                        result[name].updateFromJsonFile(file);\r\n                    else\r\n                        result[name] = new objClass(file);\r\n                });\r\n\r\n                return callback(null);\r\n            }\r\n        ],\r\n        (err) =>\r\n        {\r\n            resolve(result);\r\n        }\r\n        );\r\n    });\r\n};"]}