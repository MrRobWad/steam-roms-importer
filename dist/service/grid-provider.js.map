{"version":3,"sources":["../../src/service/grid-provider.js"],"names":["cleanName","name","gameName","replace","searchSteamGridDB","game","url","encodeURIComponent","error","response","get","set","e","ok","Error","images","data","JSON","parse","text","d","grid_link","push","image","thumbnail","thumbnail_link","searchConsoleGridDB","consoleName","shortCodes","N64","SNES","NES","GAMEBOY","GAMECUBE","WII","GBA","DS","PS1","findShortCode","c","toUpperCase","shortCode","indexOf","err","split","gridProviders","findGridImage","searchFunction","foundImages","concat","findGridImages","games","steamConfigPath","appid","gridPath","join","filePath","existsSync","mkdirSync","length","pipe","createWriteStream","console","log","warn"],"mappings":"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","file":"grid-provider.js","sourcesContent":["import superagent from 'superagent';\r\nimport path from 'path';\r\nimport fs from 'fs';\r\nimport request from 'request';\r\n\r\nconst cleanName = (name) => {\r\n  const gameName = name\r\n    .replace(/ - /gi, ': ')\r\n    .replace(/-/gi, ' ')\r\n    .replace(/CD {0,1}[0-9]/gi, '')\r\n    .replace(/ +/gi, ' ')\r\n    .replace(/ $/, '');\r\n\r\n  return gameName;\r\n};\r\n\r\nconst searchSteamGridDB = async (gameName) => {\r\n  const game = cleanName(gameName);\r\n  const url = `http://www.steamgriddb.com/search.php?name=${encodeURIComponent(game)}`;\r\n\r\n  let error;\r\n  let response;\r\n\r\n  try {\r\n    response = await superagent\r\n      .get(url)\r\n      .set('Accept', 'application/json');\r\n  } catch (e) {\r\n    error = e;\r\n  }\r\n\r\n  if (error || !response.ok) {\r\n    throw (new Error(`could not get ${url}`));\r\n  }\r\n\r\n  const images = [];\r\n  const data = JSON.parse(response.text);\r\n\r\n  for (const d of data) {\r\n    if ((typeof d === 'object') && d.grid_link) {\r\n      images.push({\r\n        image: d.grid_link,\r\n        thumbnail: d.thumbnail_link,\r\n      });\r\n    }\r\n  }\r\n\r\n  return images;\r\n};\r\n\r\nconst searchConsoleGridDB = async (gameName, consoleName) => {\r\n  const game = cleanName(gameName);\r\n\r\n  const shortCodes = {\r\n    N64: ['NINTENDO64'],\r\n    SNES: ['SUPERNES', 'SUPERNINTENDO', 'SUPERFAMICOM', 'SFC', 'SFM'],\r\n    NES: ['NES', 'FAMICOM', 'NINTENDO', 'NINTENDOENTERTAINMENTSYSTEM'],\r\n    GAMEBOY: ['GB', 'NINTENDOGAMEBOY', 'NINTENDOGB', 'NGB', 'GAMEBOYCOLOR', 'GBC', 'NINTENDOGAMEBOYCOLOR', 'NINTENDOGBC', 'NGBC', 'SUPERGAMEBOY', 'SGB', 'NINTENDOSUPERGAMEBOY', 'NINTENDOSGB', 'NSGB'],\r\n    GAMECUBE: ['GC', 'NGC', 'NINTENDOGC', 'NINTENDOGAMECUBE', 'DOLPHIN', 'NINTENDODOLPHIN'],\r\n    WII: ['NINTENDOWII'],\r\n    GBA: ['GAMEBOYADVANCE', 'GAMEBOYADVANCESP', 'NINTENDOGBA', 'GBADVANCE', 'NINTENDOGBADVANCE', 'GBAM', 'GBASP', 'GAMEBOYADVANCEMICRO', 'GBAMICRO'],\r\n    DS: ['NINTENDODS', 'NDS', 'DUALSCREEN', 'NINTENDODUALSCREEN', 'DSLITE', 'DSI', 'DSILITE', 'NINTENDODSLITE'],\r\n    PS1: ['PLAYSTATION', 'SONYPLAYSTATION', 'PSX', 'PS', 'SONYPSX'],\r\n  };\r\n\r\n  const findShortCode = (name) => {\r\n    const c = name\r\n      .replace(/\\s/g, '')\r\n      .toUpperCase();\r\n\r\n    for (const shortCode in shortCodes) {\r\n      if (shortCodes[shortCode].indexOf(c) !== -1) return shortCode;\r\n    }\r\n\r\n    return name;\r\n  };\r\n\r\n  const url = `http://consolegrid.com/api/top_picture?console=${findShortCode(consoleName)}&game=${encodeURIComponent(game)}`;\r\n\r\n  let error;\r\n  let response;\r\n\r\n  try {\r\n    response = await superagent.get(url);\r\n  } catch (err) {\r\n    error = err\r\n  }\r\n\r\n  if (error || !response.ok) {\r\n    throw (new Error(`could not get ${url}`));\r\n  }\r\n\r\n  const images = [];\r\n  const data = response.text.split('\\n');\r\n\r\n  for (const d of data) {\r\n    images.push({\r\n      image: d,\r\n      thumbnail: d,\r\n    });\r\n  }\r\n\r\n  return images;\r\n};\r\n\r\nconst gridProviders = [\r\n  searchSteamGridDB,\r\n  searchConsoleGridDB,\r\n];\r\n\r\nconst findGridImage = async (gameName, consoleName = '') => {\r\n  let images = [];\r\n\r\n  for (const searchFunction of gridProviders) {\r\n    try {\r\n      const foundImages = await searchFunction(gameName, consoleName);\r\n      images = images.concat(foundImages);\r\n    } catch (e) {\r\n    }\r\n  }\r\n\r\n  return images;\r\n};\r\n\r\nconst findGridImages = async (games, steamConfigPath) => {\r\n  for (const game of games) {\r\n    const { gameName, consoleName, appid } = game;\r\n\r\n    const gridPath = path.join(steamConfigPath, 'grid');\r\n    const filePath = path.join(gridPath, `${appid}.png`);\r\n\r\n    if (!fs.existsSync(gridPath)) fs.mkdirSync(gridPath);\r\n\r\n    if (!fs.existsSync(filePath)) {\r\n      const images = await findGridImage(gameName, consoleName);\r\n      let foundImages = false;\r\n\r\n      if (images && images.length) {\r\n        try {\r\n          const response = await request.get(images[0].image);\r\n          response.pipe(fs.createWriteStream(filePath));\r\n\r\n          foundImages = true;\r\n        } catch (err) {\r\n          foundImages = false;\r\n        }\r\n      }\r\n\r\n      if (foundImages) console.log(`Found grid for ${gameName}`);\r\n      else console.warn(`No grid image found for ${gameName}`);\r\n    } else {\r\n      console.warn(`Grid image for ${gameName} already exists, skipping.`);\r\n    }\r\n  }\r\n};\r\n\r\nexport { findGridImages };\r\nexport default findGridImages;\r\n"]}