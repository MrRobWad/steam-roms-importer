{"version":3,"sources":["../../src/model/shortcut-file.js"],"names":["fs","defaultShortcutPath","ShortcutFile","filePath","shortcuts","_readFile","existsSync","data","readFileSync","parse","toJSON","s","ShortcutPath","e","console","error","shortcut","push","self","Promise","resolve","reject","build","writeFile"],"mappings":";;;;;;;;AAAA;;IAAYA,E;;AACZ;;;;AACA;;;;AAEA;;;;;;;;AAEA,IAAMC,sBAAsB,qBAA5B;;IAEqBC,Y;AACnB,wBAAYC,QAAZ,EAAsB;AAAA;;AACpB,SAAKA,QAAL,GAAgBA,QAAhB;AACA,SAAKC,SAAL,GAAiB,EAAjB;;AAEA,SAAKC,SAAL;AACD;;;;gCAEW;AACV,UAAI,CAACL,GAAGM,UAAH,CAAc,KAAKH,QAAnB,CAAL,EAAmC;;AAEnC,UAAMI,OAAOP,GAAGQ,YAAH,CAAgB,KAAKL,QAArB,CAAb;;AAEA,UAAI;AACF,aAAKC,SAAL,GAAiB,2BAAUK,KAAV,CAAgBF,IAAhB,EAAsBG,MAAtB,EAAjB;;AAEA,aAAKN,SAAL,GAAiB,sBAAO,KAAKA,SAAZ,EAAuB;AAAA,iBAAKO,EAAEC,YAAF,KAAmBX,mBAAxB;AAAA,SAAvB,CAAjB;AACA,aAAKG,SAAL,GAAiB,mBAAI,KAAKA,SAAT,EAAoB;AAAA,iBAAK,iCAAaO,CAAb,CAAL;AAAA,SAApB,CAAjB;AACD,OALD,CAKE,OAAOE,CAAP,EAAU;AACVC,gBAAQC,KAAR,CAAcF,CAAd;AACD;AACF;;;gCAEWG,Q,EAAU;AACpB,UAAML,IAAI,iCAAaK,QAAb,CAAV;;AAEAL,QAAEC,YAAF,GAAiBX,mBAAjB;;AAEA,WAAKG,SAAL,CAAea,IAAf,CAAoBN,CAApB;AACA,aAAOA,CAAP;AACD;;;2CAEsB;AACrB,UAAMO,OAAO,IAAb;;AAEA,aAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC,YAAMd,OAAO,4BAAWe,KAAX,CAAiBJ,KAAKd,SAAtB,CAAb;;AAEAJ,WAAGuB,SAAH,CAAaL,KAAKf,QAAlB,EAA4BI,IAA5B,EAAkC,UAACQ,KAAD,EAAW;AAC3C,cAAIA,KAAJ,EAAW,OAAOM,OAAON,KAAP,CAAP;AACX,iBAAOK,SAAP;AACD,SAHD;AAID,OAPM,CAAP;AAQD;;;;;;kBA3CkBlB,Y","file":"shortcut-file.js","sourcesContent":["import * as fs from 'fs';\r\nimport map from 'lodash/map';\r\nimport filter from 'lodash/filter';\r\n\r\nimport { Parser as VDFParser, Builder as VDFBuilder, Shortcut } from 'node-steam-shortcuts';\r\n\r\nconst defaultShortcutPath = 'steam-roms-importer';\r\n\r\nexport default class ShortcutFile {\r\n  constructor(filePath) {\r\n    this.filePath = filePath;\r\n    this.shortcuts = [];\r\n\r\n    this._readFile();\r\n  }\r\n\r\n  _readFile() {\r\n    if (!fs.existsSync(this.filePath)) return;\r\n\r\n    const data = fs.readFileSync(this.filePath);\r\n\r\n    try {\r\n      this.shortcuts = VDFParser.parse(data).toJSON();\r\n\r\n      this.shortcuts = filter(this.shortcuts, s => s.ShortcutPath !== defaultShortcutPath);\r\n      this.shortcuts = map(this.shortcuts, s => new Shortcut(s));\r\n    } catch (e) {\r\n      console.error(e);\r\n    }\r\n  }\r\n\r\n  addShortcut(shortcut) {\r\n    const s = new Shortcut(shortcut);\r\n\r\n    s.ShortcutPath = defaultShortcutPath;\r\n\r\n    this.shortcuts.push(s);\r\n    return s;\r\n  }\r\n\r\n  async writeShortcuts() {\r\n    const self = this;\r\n\r\n    return new Promise((resolve, reject) => {\r\n      const data = VDFBuilder.build(self.shortcuts);\r\n\r\n      fs.writeFile(self.filePath, data, (error) => {\r\n        if (error) return reject(error);\r\n        return resolve();\r\n      });\r\n    });\r\n  }\r\n}\r\n"]}