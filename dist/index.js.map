{"version":3,"sources":["../src/index.js"],"names":["loadConsoles","loadEmulators","consoles","Promise","resolve","reject","then","emulators","getSteamConfigPath","users","readdirSync","length","console","error","filePath","loadShortcutsFile","join","shortcutFile","generateShortcuts","shortcutsFile","grids","each","gameConsole","name","searchGames","emulator","getEmulator","games","game","gameShortcut","appname","prefix","cleanName","exe","getCommandForGame","icon","tags","replace","ignore","shortcut","addShortcut","push","gameName","consoleName","appid","getAppID","writeShortcuts","mapSeries","callback","gridPath","existsSync","mkdirSync","warn","images","url","image","request","indexOf","get","response","file","createWriteStream","log","pipe","e","userConfigDir","global","USER_CONFIG_DIR","emulatorName","toLowerCase","addEmulator"],"mappings":"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","file":"index.js","sourcesContent":["import ShortcutFile from './shortcut-file';\r\nimport {findGridImages} from './grid-provider';\r\nimport {loadConfigObject, getUserConfigDirectory} from './user-config';\r\nimport fs from 'fs';\r\nimport http from 'http';\r\nimport https from 'https';\r\nimport os from 'os';\r\nimport path from 'path';\r\nimport async from 'async';\r\nimport _ from 'lodash';\r\n\r\nimport GameConsole from './game-console';\r\nimport Emulator from './emulator';\r\n\r\nlet loadConsoles = () =>\r\n{\r\n    return loadConfigObject('consoles', GameConsole);\r\n}\r\n\r\nlet loadEmulators = (consoles) =>\r\n{\r\n    return new Promise((resolve, reject) =>\r\n    {\r\n        loadConfigObject('emulators', Emulator).then((emulators) => resolve({consoles: consoles, emulators: emulators}));\r\n    });\r\n}\r\n\r\nlet getSteamConfigPath = () =>\r\n{\r\n    let users = fs.readdirSync(\"C:/Program Files (x86)/Steam/userdata/\");\r\n\r\n    if (!users || !users.length)\r\n        console.error('No steam directory found !');\r\n\r\n    let filePath = \"C:/Program Files (x86)/Steam/userdata/\" + users[0] + \"/config\";\r\n\r\n    return filePath;\r\n}\r\n\r\nlet loadShortcutsFile = () =>\r\n{\r\n    return new Promise((resolve, reject) =>\r\n    {\r\n        let filePath = path.join(getSteamConfigPath(), 'shortcuts.vdf');\r\n\r\n        let shortcutFile = new ShortcutFile(filePath);\r\n\r\n        return resolve(shortcutFile);\r\n    });\r\n}\r\n\r\nlet generateShortcuts = (consoles, shortcutsFile) =>\r\n{\r\n    let grids = [];\r\n\r\n    _.each(consoles, (gameConsole, name) =>\r\n    {\r\n        gameConsole.searchGames();\r\n        let emulator = gameConsole.getEmulator();\r\n\r\n        if (!emulator)\r\n            return;\r\n\r\n        _.each(gameConsole.games, (game) =>\r\n        {\r\n            let gameShortcut = {\r\n                appname: gameConsole.prefix + ' ' + game.cleanName,\r\n                exe: emulator.getCommandForGame(game),\r\n                icon: gameConsole.icon,\r\n                tags: gameConsole.tags,\r\n            }\r\n\r\n            gameShortcut.appname = gameShortcut.appname.replace(/^ +/, '').replace(/ +$/, '');\r\n\r\n            if (!game.ignore)\r\n            {\r\n                let shortcut = shortcutsFile.addShortcut(gameShortcut);\r\n\r\n                grids.push({\r\n                    gameName: game.cleanName,\r\n                    consoleName: gameConsole.name,\r\n                    appid: shortcut.getAppID()\r\n                });\r\n            }\r\n        });\r\n    });\r\n\r\n    shortcutsFile.writeShortcuts();\r\n\r\n    async.mapSeries(\r\n        grids, \r\n        ({gameName, consoleName, appid}, callback) =>\r\n        {\r\n            let gridPath = path.join(getSteamConfigPath(), 'grid');\r\n\r\n            if (!fs.existsSync(gridPath))\r\n                fs.mkdirSync(gridPath);\r\n\r\n            let filePath = path.join(gridPath, appid + '.png');\r\n\r\n            if (fs.existsSync(filePath))\r\n            {\r\n                console.warn(`Grid image for ${gameName} already exists, skipping.`);\r\n                return callback(null);\r\n            }\r\n\r\n            findGridImages(gameName, consoleName).then((images) => \r\n            {\r\n                if (images && images.length)\r\n                {\r\n                    let url = images[0].image;\r\n                    let request = (url.indexOf('https:') != -1) ? https : http;\r\n\r\n                    try\r\n                    {\r\n                        request.get(url, (response) =>\r\n                        {\r\n                            let file = fs.createWriteStream(filePath);\r\n\r\n                            console.log('Found grid for ' + gameName);\r\n\r\n                            response.pipe(file)\r\n                            return callback(null);\r\n                        });\r\n                    }\r\n                    catch(e)\r\n                    {\r\n                        console.log(`No grid image found for ${gameName}`);\r\n                        return callback(null);\r\n                    }\r\n                }\r\n                else\r\n                {\r\n                    console.log(`No grid image found for ${gameName}`);\r\n                    return callback(null);\r\n                }\r\n            });\r\n        }\r\n    );\r\n}\r\n\r\ngetUserConfigDirectory().then((userConfigDir) =>\r\n{\r\n    global.USER_CONFIG_DIR = userConfigDir;\r\n\r\n    loadConsoles().then(loadEmulators).then(({consoles, emulators}) =>\r\n    {\r\n        _.each(emulators, (emulator, emulatorName) =>\r\n        {\r\n            _.each(emulator.consoles, (consoleName) =>\r\n            {\r\n                consoleName = consoleName.toLowerCase();\r\n                if (consoles[consoleName])\r\n                    consoles[consoleName].addEmulator(emulatorName, emulator);\r\n            });\r\n        });\r\n\r\n        loadShortcutsFile().then((shortcutsFile) => {\r\n            generateShortcuts(consoles, shortcutsFile);\r\n        });\r\n    });\r\n});\r\n"]}