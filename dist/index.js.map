{"version":3,"sources":["../src/index.js"],"names":["loadConsoles","loadEmulators","consoles","Promise","resolve","reject","then","emulators","getSteamConfigPath","users","readdirSync","length","console","error","filePath","loadShortcutsFile","join","shortcutFile","generateShortcuts","shortcutsFile","games","each","gameConsole","name","searchGames","emulator","getEmulator","game","gameShortcut","appname","prefix","cleanName","exe","getCommandForGame","icon","tags","replace","ignore","shortcut","addShortcut","push","gameName","consoleName","appid","getAppID","writeShortcuts","userConfigDir","global","USER_CONFIG_DIR","emulatorName","toLowerCase","addEmulator"],"mappings":"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","file":"index.js","sourcesContent":["import ShortcutFile from './shortcut-file';\r\nimport {findGridImages} from './grid-provider';\r\nimport {loadConfigObject, getUserConfigDirectory} from './user-config';\r\nimport fs from 'fs';\r\nimport os from 'os';\r\nimport path from 'path';\r\nimport async from 'async';\r\nimport _ from 'lodash';\r\n\r\nimport GameConsole from './game-console';\r\nimport Emulator from './emulator';\r\n\r\nlet loadConsoles = () =>\r\n{\r\n    return loadConfigObject('consoles', GameConsole);\r\n}\r\n\r\nlet loadEmulators = (consoles) =>\r\n{\r\n    return new Promise((resolve, reject) =>\r\n    {\r\n        loadConfigObject('emulators', Emulator).then((emulators) => resolve({consoles: consoles, emulators: emulators}));\r\n    });\r\n}\r\n\r\nlet getSteamConfigPath = () =>\r\n{\r\n    let users = fs.readdirSync(\"C:/Program Files (x86)/Steam/userdata/\");\r\n\r\n    if (!users || !users.length)\r\n        console.error('No steam directory found !');\r\n\r\n    let filePath = \"C:/Program Files (x86)/Steam/userdata/\" + users[0] + \"/config\";\r\n\r\n    return filePath;\r\n}\r\n\r\nlet loadShortcutsFile = () =>\r\n{\r\n    return new Promise((resolve, reject) =>\r\n    {\r\n        let filePath = path.join(getSteamConfigPath(), 'shortcuts.vdf');\r\n\r\n        let shortcutFile = new ShortcutFile(filePath);\r\n\r\n        return resolve(shortcutFile);\r\n    });\r\n}\r\n\r\nlet generateShortcuts = (consoles, shortcutsFile) =>\r\n{\r\n    let games = [];\r\n\r\n    _.each(consoles, (gameConsole, name) =>\r\n    {\r\n        gameConsole.searchGames();\r\n        let emulator = gameConsole.getEmulator();\r\n\r\n        if (!emulator)\r\n            return;\r\n\r\n        _.each(gameConsole.games, (game) =>\r\n        {\r\n            let gameShortcut = {\r\n                appname: gameConsole.prefix + ' ' + game.cleanName,\r\n                exe: emulator.getCommandForGame(game),\r\n                icon: gameConsole.icon,\r\n                tags: gameConsole.tags,\r\n            }\r\n\r\n            gameShortcut.appname = gameShortcut.appname.replace(/^ +/, '').replace(/ +$/, '');\r\n\r\n            if (!game.ignore)\r\n            {\r\n                let shortcut = shortcutsFile.addShortcut(gameShortcut);\r\n\r\n                games.push({\r\n                    gameName: game.cleanName,\r\n                    consoleName: gameConsole.name,\r\n                    appid: shortcut.getAppID()\r\n                });\r\n            }\r\n        });\r\n    });\r\n\r\n    shortcutsFile.writeShortcuts();\r\n\r\n    findGridImages(games, getSteamConfigPath());\r\n}\r\n\r\ngetUserConfigDirectory().then((userConfigDir) =>\r\n{\r\n    global.USER_CONFIG_DIR = userConfigDir;\r\n\r\n    loadConsoles().then(loadEmulators).then(({consoles, emulators}) =>\r\n    {\r\n        _.each(emulators, (emulator, emulatorName) =>\r\n        {\r\n            _.each(emulator.consoles, (consoleName) =>\r\n            {\r\n                consoleName = consoleName.toLowerCase();\r\n                if (consoles[consoleName])\r\n                    consoles[consoleName].addEmulator(emulatorName, emulator);\r\n            });\r\n        });\r\n\r\n        loadShortcutsFile().then((shortcutsFile) => {\r\n            generateShortcuts(consoles, shortcutsFile);\r\n        });\r\n    });\r\n});\r\n"]}