{"version":3,"sources":["../src/grid-provider.js"],"names":["findGridImages","searchSteamGridDB","game","callback","Promise","resolve","reject","replace","url","encodeURIComponent","get","set","end","err","res","ok","message","images","data","JSON","parse","text","d","push","image","thumbnail","searchConsoleGridDB","console","shortCodes","findShortCode","c","toUpperCase","shortCode","indexOf","split","gridProviders","findGridImage","concat","searchFunction","then","catch","e","error","games","steamConfigPath","mapSeries","gameName","consoleName","appid","gridPath","join","existsSync","mkdirSync","filePath","warn","length","request","response","file","createWriteStream","log","pipe"],"mappings":"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","file":"grid-provider.js","sourcesContent":["import async from 'async';\r\nimport superagent from 'superagent';\r\nimport path from 'path';\r\nimport fs from 'fs';\r\nimport http from 'http';\r\nimport https from 'https';\r\n\r\nlet searchSteamGridDB = (game, callback) =>\r\n{\r\n    return new Promise((resolve, reject) =>\r\n    {\r\n        game = game.replace(/ - /gi, ': ').replace(/-/gi, ' ').replace(/CD {0,1}[0-9]/gi, '').replace(/ +/gi, ' ').replace(/ $/, '');\r\n        let url = `http://www.steamgriddb.com/search.php?name=${encodeURIComponent(game)}`;\r\n\r\n        superagent\r\n            .get(url)\r\n            .set('Accept', 'application/json')\r\n            .end((err, res) =>\r\n            {\r\n                if (err || !res.ok) \r\n                    return reject({message: 'could not get '});\r\n\r\n                let images = [];\r\n                let data = JSON.parse(res.text);\r\n\r\n                for (let d of data)\r\n                {\r\n                    if (!(typeof d === 'object'))\r\n                        continue;\r\n\r\n                    if (d['grid_link'])\r\n                        images.push({\r\n                            image: d['grid_link'],\r\n                            thumbnail: d['thumbnail_link']\r\n                        });\r\n                }\r\n\r\n                return resolve(images);\r\n            });\r\n    });\r\n}\r\n\r\nlet searchConsoleGridDB = (game, console) =>\r\n{\r\n    return new Promise((resolve, reject) =>\r\n    {\r\n        let shortCodes = {\r\n            'N64': ['NINTENDO64'],\r\n            'SNES': ['SUPERNES', 'SUPERNINTENDO', 'SUPERFAMICOM', 'SFC', 'SFM'],\r\n            'NES': ['NES', 'FAMICOM', 'NINTENDO', 'NINTENDOENTERTAINMENTSYSTEM'],\r\n            'GAMEBOY': ['GB', 'NINTENDOGAMEBOY', 'NINTENDOGB', 'NGB', 'GAMEBOYCOLOR', 'GBC', 'NINTENDOGAMEBOYCOLOR', 'NINTENDOGBC', 'NGBC', 'SUPERGAMEBOY', 'SGB', 'NINTENDOSUPERGAMEBOY', 'NINTENDOSGB', 'NSGB'],\r\n            'GAMECUBE': ['GC', 'NGC', 'NINTENDOGC', 'NINTENDOGAMECUBE', 'DOLPHIN', 'NINTENDODOLPHIN'],\r\n            'WII': ['NINTENDOWII'],\r\n            'GBA': ['GAMEBOYADVANCE', 'GAMEBOYADVANCESP', 'NINTENDOGBA', 'GBADVANCE', 'NINTENDOGBADVANCE', 'GBAM', 'GBASP', 'GAMEBOYADVANCEMICRO', 'GBAMICRO'],\r\n            'DS': ['NINTENDODS', 'NDS', 'DUALSCREEN', 'NINTENDODUALSCREEN', 'DSLITE', 'DSI', 'DSILITE', 'NINTENDODSLITE'],\r\n            'PS1': ['PLAYSTATION', 'SONYPLAYSTATION', 'PSX', 'PS', 'SONYPSX']\r\n        }\r\n\r\n        let findShortCode = (console) =>\r\n        {\r\n            let c = console.replace(/\\s/g, '').toUpperCase();\r\n\r\n            for (let shortCode in shortCodes)\r\n            {\r\n                if (shortCodes[shortCode].indexOf(c) != -1)\r\n                    return shortCode;\r\n            }\r\n\r\n            return console;\r\n        }\r\n\r\n        game = game.replace('-', ' ').replace(/CD {0-1}[0-9]/gi, '').replace(/ +/gi, ' ').replace(/ $/, '');\r\n\r\n        let url = `http://consolegrid.com/api/top_picture?console=${findShortCode(console)}&game=${encodeURIComponent(game)}`;\r\n\r\n        superagent\r\n            .get(url)\r\n            .end((err, res) =>\r\n            {\r\n                if (err || !res.ok) \r\n                    return reject({message: 'could not get anything from consolegrid'});\r\n\r\n                let images = [];\r\n                let data = res.text.split('\\n');\r\n\r\n                for (let d of data)\r\n                {\r\n                    images.push({\r\n                        image: d,\r\n                        thumbnail: d\r\n                    });\r\n                }\r\n\r\n                return resolve(images);\r\n            });\r\n    });\r\n}\r\n\r\nlet gridProviders = [\r\n    searchSteamGridDB,\r\n    searchConsoleGridDB\r\n];\r\n\r\nfunction findGridImage (game, console=\"\")\r\n{\r\n    return new Promise((resolve, reject) =>\r\n    {\r\n        async.concat(\r\n            gridProviders, \r\n            (searchFunction, callback) =>\r\n            {\r\n                searchFunction(game, console)\r\n                    .then((images) => callback(null, images))\r\n                    .catch((e) => callback(null, []));\r\n            },\r\n            (error, images) =>\r\n            {\r\n                resolve(images);\r\n            }\r\n        );\r\n    });\r\n};\r\n\r\nexport function findGridImages (games, steamConfigPath)\r\n{\r\n    async.mapSeries(\r\n        games, \r\n        ({gameName, consoleName, appid}, callback) =>\r\n        {\r\n            let gridPath = path.join(steamConfigPath, 'grid');\r\n\r\n            if (!fs.existsSync(gridPath))\r\n                fs.mkdirSync(gridPath);\r\n\r\n            let filePath = path.join(gridPath, appid + '.png');\r\n\r\n            if (fs.existsSync(filePath))\r\n            {\r\n                console.warn(`Grid image for ${gameName} already exists, skipping.`);\r\n                return callback(null);\r\n            }\r\n\r\n            findGridImage(gameName, consoleName).then((images) => \r\n            {\r\n                if (images && images.length)\r\n                {\r\n                    let url = images[0].image;\r\n                    let request = (url.indexOf('https:') != -1) ? https : http;\r\n\r\n                    try\r\n                    {\r\n                        request.get(url, (response) =>\r\n                        {\r\n                            let file = fs.createWriteStream(filePath);\r\n\r\n                            console.log('Found grid for ' + gameName);\r\n\r\n                            response.pipe(file)\r\n                            return callback(null);\r\n                        });\r\n                    }\r\n                    catch(e)\r\n                    {\r\n                        console.warn(`No grid image found for ${gameName}`);\r\n                        return callback(null);\r\n                    }\r\n                }\r\n                else\r\n                {\r\n                    console.warn(`No grid image found for ${gameName}`);\r\n                    return callback(null);\r\n                }\r\n            });\r\n        }\r\n    );\r\n}"]}